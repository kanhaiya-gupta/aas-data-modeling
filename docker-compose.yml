version: '3.8'

services:
  # AASX Package Explorer with Wine
  aasx-explorer:
    build:
      context: .
      dockerfile: Dockerfile.robust
    container_name: aasx-package-explorer
    ports:
      - "1111:1111"  # REST API port
      - "8080:8080"  # Web interface port
    volumes:
      - aasx-data:/app/AasxPackageExplorer/data
      - aasx-backup:/app/AasxPackageExplorer/backup
      - aasx-plugins:/app/AasxPackageExplorer/plugins
      - digital-twins:/app/digital-twins
      - certificates:/app/certificates
    environment:
      - DISPLAY=:99
      - WINEDEBUG=-all
      - AAS_ENVIRONMENT=production
      - DIGITAL_TWIN_MODE=true
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:1111/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Web interface for AASX Package Explorer
  aasx-web:
    image: nginx:alpine
    container_name: aasx-web-interface
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./web-interface:/usr/share/nginx/html
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - aasx-explorer
    restart: unless-stopped

  # Database for AAS data persistence
  aasx-db:
    image: postgres:13-alpine
    container_name: aasx-database
    environment:
      POSTGRES_DB: aasx_data
      POSTGRES_USER: aasx_user
      POSTGRES_PASSWORD: aasx_password
    volumes:
      - aasx-db-data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
      - ./digital-twin-schema.sql:/docker-entrypoint-initdb.d/digital-twin-schema.sql
    ports:
      - "5432:5432"
    restart: unless-stopped

  # Redis for caching and session management
  aasx-redis:
    image: redis:6-alpine
    container_name: aasx-redis
    ports:
      - "6379:6379"
    volumes:
      - aasx-redis-data:/data
    restart: unless-stopped

  # AI/RAG System for Quality Infrastructure Analysis
  ai-rag-system:
    image: python:3.9-slim
    container_name: ai-rag-system
    ports:
      - "8000:8000"
    volumes:
      - ./ai-rag:/app
      - digital-twins:/app/digital-twins
      - certificates:/app/certificates
      - aasx-data:/app/aas-data
    environment:
      - DATABASE_URL=postgresql://aasx_user:aasx_password@aasx-db:5432/aasx_data
      - REDIS_URL=redis://aasx-redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
    working_dir: /app
    command: >
      sh -c "pip install -r requirements.txt &&
             python -m uvicorn main:app --host 0.0.0.0 --port 8000 --reload"
    depends_on:
      - aasx-db
      - aasx-redis
    restart: unless-stopped

  # Digital Certificate Management System
  certificate-manager:
    image: node:18-alpine
    container_name: certificate-manager
    ports:
      - "3001:3001"
    volumes:
      - ./certificate-manager:/app
      - certificates:/app/certificates
      - aasx-data:/app/aas-data
    environment:
      - DATABASE_URL=postgresql://aasx_user:aasx_password@aasx-db:5432/aasx_data
      - NODE_ENV=production
      - CERTIFICATE_STORAGE_PATH=/app/certificates
    working_dir: /app
    command: >
      sh -c "npm install &&
             npm run start"
    depends_on:
      - aasx-db
    restart: unless-stopped

  # Digital Twin Registry and Management
  twin-registry:
    image: python:3.9-slim
    container_name: twin-registry
    ports:
      - "8001:8001"
    volumes:
      - ./twin-registry:/app
      - digital-twins:/app/digital-twins
      - aasx-data:/app/aas-data
    environment:
      - DATABASE_URL=postgresql://aasx_user:aasx_password@aasx-db:5432/aasx_data
      - TWIN_STORAGE_PATH=/app/digital-twins
      - AAS_ENDPOINT=http://aasx-explorer:1111
    working_dir: /app
    command: >
      sh -c "pip install -r requirements.txt &&
             python -m uvicorn main:app --host 0.0.0.0 --port 8001 --reload"
    depends_on:
      - aasx-db
      - aasx-explorer
    restart: unless-stopped

  # Quality Infrastructure Analytics Dashboard
  qi-analytics:
    image: node:18-alpine
    container_name: qi-analytics
    ports:
      - "3002:3002"
    volumes:
      - ./qi-analytics:/app
      - aasx-data:/app/aas-data
    environment:
      - DATABASE_URL=postgresql://aasx_user:aasx_password@aasx-db:5432/aasx_data
      - AI_RAG_URL=http://ai-rag-system:8000
      - TWIN_REGISTRY_URL=http://twin-registry:8001
      - CERTIFICATE_MANAGER_URL=http://certificate-manager:3001
    working_dir: /app
    command: >
      sh -c "npm install &&
             npm run start"
    depends_on:
      - aasx-db
      - ai-rag-system
      - twin-registry
      - certificate-manager
    restart: unless-stopped

  # Vector Database for AI/RAG System
  vector-db:
    image: qdrant/qdrant:latest
    container_name: vector-db
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - vector-db-data:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    restart: unless-stopped

  # Monitoring and logging
  aasx-monitoring:
    image: grafana/grafana:latest
    container_name: aasx-monitoring
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - aasx-grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    restart: unless-stopped

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  # Elasticsearch for advanced logging and search
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    restart: unless-stopped

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.0
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    depends_on:
      - elasticsearch
    restart: unless-stopped

  # Filebeat for log collection
  filebeat:
    image: docker.elastic.co/beats/filebeat:7.17.0
    container_name: filebeat
    volumes:
      - ./monitoring/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      - elasticsearch
    restart: unless-stopped

volumes:
  aasx-data:
    driver: local
  aasx-backup:
    driver: local
  aasx-plugins:
    driver: local
  aasx-db-data:
    driver: local
  aasx-redis-data:
    driver: local
  aasx-grafana-data:
    driver: local
  digital-twins:
    driver: local
  certificates:
    driver: local
  vector-db-data:
    driver: local
  prometheus-data:
    driver: local
  elasticsearch-data:
    driver: local

networks:
  default:
    name: aasx-network 