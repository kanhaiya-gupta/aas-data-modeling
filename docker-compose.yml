version: '3.8'

services:
  # Neo4j Database
  neo4j:
    image: neo4j:5.15
    container_name: aasx-framework-neo4j
    environment:
      NEO4J_AUTH: neo4j/password
      NEO4J_PLUGINS: '["apoc", "graph-data-science"]'
      NEO4J_dbms_security_procedures_unrestricted: apoc.*,gds.*
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    networks:
      - aasx-network
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "password", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: aasx-framework-qdrant
    ports:
      - "6333:6333"  # REST API
      - "6334:6334"  # GRPC
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - aasx-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # AASX Digital Twin Analytics Framework Webapp
  webapp:
    build:
      context: .
      dockerfile: docker/Dockerfile.webapp
    container_name: aasx-framework-webapp
    ports:
      - "8000:8000"
    environment:
      - NEO4J_URI=neo4j://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=password
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    volumes:
      - ./data:/app/data
      - ./output:/app/output
      - ./logs:/app/logs
    depends_on:
      neo4j:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    networks:
      - aasx-network
    restart: unless-stopped

  # AI/RAG System
  ai-rag:
    build:
      context: .
      dockerfile: docker/Dockerfile.ai-rag
    container_name: aasx-framework-ai-rag
    environment:
      - NEO4J_URI=neo4j://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=password
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    volumes:
      - ./data:/app/data
      - ./output:/app/output
      - ./logs:/app/logs
    depends_on:
      neo4j:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    networks:
      - aasx-network
    restart: unless-stopped

  # Digital Twin Registry
  twin-registry:
    build:
      context: .
      dockerfile: docker/Dockerfile.twin-registry
    container_name: aasx-framework-twin-registry
    environment:
      - NEO4J_URI=neo4j://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=password
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      neo4j:
        condition: service_healthy
    networks:
      - aasx-network
    restart: unless-stopped

  # Certificate Manager
  certificate-manager:
    build:
      context: .
      dockerfile: docker/Dockerfile.certificate-manager
    container_name: aasx-framework-certificate-manager
    environment:
      - NEO4J_URI=neo4j://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=password
    volumes:
      - ./certificates:/app/certificates
      - ./logs:/app/logs
    depends_on:
      neo4j:
        condition: service_healthy
    networks:
      - aasx-network
    restart: unless-stopped

  # Analytics Dashboard
  analytics:
    build:
      context: .
      dockerfile: docker/Dockerfile.analytics
    container_name: aasx-framework-analytics
    environment:
      - NEO4J_URI=neo4j://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=password
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
    volumes:
      - ./data:/app/data
      - ./output:/app/output
      - ./logs:/app/logs
    depends_on:
      neo4j:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    networks:
      - aasx-network
    restart: unless-stopped

volumes:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  neo4j_plugins:
  qdrant_data:

networks:
  aasx-network:
    driver: bridge 