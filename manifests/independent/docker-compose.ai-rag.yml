services:
  # AI/RAG System (Independent)
  ai-rag:
    build:
      context: .
      dockerfile: docker/independent/Dockerfile.ai-rag
    container_name: ai-rag-standalone
    volumes:
      - ./output:/app/output
      - ./logs:/app/logs
      - ./data:/app/data
    environment:
      - QDRANT_URL=http://qdrant:6333
      - NEO4J_URI=neo4j://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=Neo4j123
      - PYTHONPATH=/app
      - LOG_LEVEL=INFO
      - ETL_OUTPUT_DIR=/app/output/etl_results
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - RAG_QUERY=${RAG_QUERY:-}
      - RAG_QUERY_NAME=${RAG_QUERY_NAME:-}
      - RAG_CATEGORY=${RAG_CATEGORY:-}
      - RAG_ANALYSIS_TYPE=${RAG_ANALYSIS_TYPE:-general}
      - RAG_COLLECTION=${RAG_COLLECTION:-aasx_assets}
      - RAG_LIMIT=${RAG_LIMIT:-5}
    depends_on:
      - qdrant
      - neo4j
    restart: "no"

  # Qdrant Vector Database (Required for AI/RAG)
  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant-standalone
    volumes:
      - qdrant-data:/qdrant/storage
    ports:
      - "6333:6333"
      - "6334:6334"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/collections"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Neo4j Database (Required for AI/RAG)
  neo4j:
    image: neo4j:5.15-community
    container_name: neo4j-ai-rag
    environment:
      NEO4J_AUTH: neo4j/Neo4j123
      NEO4J_PLUGINS: '["apoc"]'
    volumes:
      - neo4j-ai-rag-data:/data
      - neo4j-ai-rag-logs:/logs
      - neo4j-ai-rag-import:/var/lib/neo4j/import
      - neo4j-ai-rag-plugins:/plugins
    ports:
      - "7475:7474"
      - "7688:7687"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7474"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

volumes:
  qdrant-data:
  neo4j-ai-rag-data:
  neo4j-ai-rag-logs:
  neo4j-ai-rag-import:
  neo4j-ai-rag-plugins: 